import fs = require('fs');
import Helper = require('./helper');

export interface ISocket {
  remoteAddress: string;
  remotePort: number;
  localAddress: string;
  localPort: number;
}

export interface IConnection {
  socket: ISocket;
  user: string;
}

export class OidentdFile {
  private _file: string;
  private _connections: { [id: number]: IConnection };
  private _connectionId = 0;

  constructor(file: string) {
    this._file = Helper.expandHome(file);
    this._connections = {};
    this.refresh();
  }

  addConnection(connection: IConnection): number {
    const id = this._connectionId++;
    this._connections[id] = connection;
    return id;
  }

  removeConnection(id: number): void {
    delete this._connections[id];
  }

  refresh(): void {
    let file = "# Warning: file generated by The Lounge: changes will be overwritten!\n";

    for(let id in this._connections) {
      file += this.makeRule(this._connections[id]);
    }

    fs.writeFile(this._file, file, {flag: 'w+'}, function(err) {
      if(err) {
        throw 'Failed to update oidentd file!';
      }
    });
  }

  private makeRule(connection: IConnection): string {
    return  'to ' + connection.socket.remoteAddress
      + ' lport ' + connection.socket.localPort
      + ' from ' + connection.socket.localAddress
      + ' fport ' + connection.socket.remotePort
      + ' { reply \"' + connection.user + '\" }\n';
  }
}
